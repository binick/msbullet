<Project>
  <PropertyGroup>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <IsPackable>true</IsPackable>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <!-- Build Tasks should not include any dependencies -->
    <SuppressDependenciesWhenPacking Condition="'$(SuppressDependenciesWhenPacking)' == ''">true</SuppressDependenciesWhenPacking>
  </PropertyGroup>

  <PropertyGroup>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageRequireLicenseAcceptance>true</PackageRequireLicenseAcceptance>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageIcon>icon.png</PackageIcon>
    <ProjectUrl>https://binick.github.io/msbullet</ProjectUrl> 
    <RepositoryUrl>https://github.com/binick/msbullet.git</RepositoryUrl> 
    <RepositoryType>git</RepositoryType> 
  </PropertyGroup>

  <!--
    Default to including all *.props and *.targets files
    from the project directory into the NuGet package root
  -->
  <ItemGroup Condition="'$(EnableDefaultItems)' != 'false'">
    <None Condition="'$(EnableDefaultNoneItems)' != 'false'"
          Include="**/*.props;**/*.targets" Pack="true">
      <PackagePath>%(RecursiveDir)%(Filename)%(Extension)</PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <None Include="$(RepoRoot)assets/README.md" PackagePath="" Pack="true" />
    <None Include="$(RepoRoot)LICENSE" PackagePath="" Pack="true"/>
    <None Include="$(RepoRoot)assets/icon.png" PackagePath="$(PackageIcon)" Pack="true"/>
  </ItemGroup>

  <ItemGroup>
    <!--
      Update all PackageReference and ProjectReference Items to have
      PrivateAssets="All" and default Publish to true.
      This removes the dependency nodes from the generated nuspec and
      forces the publish output to contain the dlls.
     -->
    <PackageReference Update="@(PackageReference)">
      <PrivateAssets>All</PrivateAssets>
      <Publish Condition="'%(PackageReference.Publish)' == ''">true</Publish>
      <ExcludeAssets Condition="'%(PackageReference.Publish)' == 'false'">runtime</ExcludeAssets>
    </PackageReference>
    <ProjectReference Update="@(ProjectReference)">
      <PrivateAssets>All</PrivateAssets>
      <Publish Condition="'%(ProjectReference.Publish)' == ''">true</Publish>
    </ProjectReference>

    <!--
      Update all Reference items to have Pack="false"
      This removes the frameworkDependency nodes from the generated nuspec
    -->
    <Reference Update="@(Reference)">
      <Pack>false</Pack>
    </Reference>

    <!-- 
      Do not include assemblies that MSBuild ships with in the package.
    -->
    <PackageReference Update="Microsoft.Build" PrivateAssets="All" Publish="false" ExcludeAssets="runtime" />
    <PackageReference Update="Microsoft.Build.Framework" PrivateAssets="All" Publish="false" ExcludeAssets="runtime" />
    <PackageReference Update="Microsoft.Build.Tasks.Core" PrivateAssets="All" Publish="false" ExcludeAssets="runtime" />
    <PackageReference Update="Microsoft.Build.Utilities.Core" PrivateAssets="All" Publish="false" ExcludeAssets="runtime" />
    <PackageReference Update="System.Collections.Immutable" PrivateAssets="All" Publish="false" ExcludeAssets="runtime" />
    <PackageReference Update="System.IO.Compression" PrivateAssets="All" Publish="false" ExcludeAssets="runtime" />
    <PackageReference Update="System.Runtime.InteropServices.RuntimeInformation" PrivateAssets="All" Publish="false" ExcludeAssets="runtime" />
    <PackageReference Update="System.Threading.Tasks.Dataflow" PrivateAssets="All" Publish="false" ExcludeAssets="runtime" />
  </ItemGroup>

  <PropertyGroup>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificContentInPackage);_AddBuildOutputToPackageCore;_AddBuildOutputToPackageDesktop</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>
  
  <Target Name="_AddBuildOutputToPackageCore" DependsOnTargets="Publish" Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp'">
    <ItemGroup>
      <!-- Publish .NET Core assets and include them in the package under tools directory. -->
      <TfmSpecificPackageFile Include="$(PublishDir)**" 
                              PackagePath="tools/$(TargetFramework)/%(RecursiveDir)%(FileName)%(Extension)"/>
    </ItemGroup>
  </Target>

  <Target Name="_AddBuildOutputToPackageDesktop" Condition="'$(TargetFrameworkIdentifier)' != '.NETCoreApp'">
    <ItemGroup>
      <!-- Include .NET Framework build outputs in the package under tools directory. -->
      <TfmSpecificPackageFile Include="$(OutputPath)**" PackagePath="tools/$(TargetFramework)/%(RecursiveDir)%(FileName)%(Extension)"/>
    </ItemGroup>
  </Target>
</Project>
