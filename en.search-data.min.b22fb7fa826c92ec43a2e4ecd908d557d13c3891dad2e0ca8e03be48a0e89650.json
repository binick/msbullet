[{"id":0,"href":"/msbullet/getting-started/","title":"Getting started","section":"MsBullet SDK","content":"Getting started #  You can start using this SDK based on MSBuild in three steps:\n Add global.json:  { \u0026#34;tools\u0026#34;: { \u0026#34;dotnet\u0026#34;: \u0026#34;[dotnet sdk version]\u0026#34; }, \u0026#34;msbuild-sdks\u0026#34;: { \u0026#34;MsBullet.Sdk\u0026#34;: \u0026#34;[MsBullet.Sdk version]\u0026#34; } } Add Directory.Build.props or copy this on root of your repo:  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;Project\u0026gt; \u0026lt;Import Project=\u0026#34;Sdk.props\u0026#34; Sdk=\u0026#34;MsBullet.Sdk\u0026#34; /\u0026gt; \u0026lt;/Project\u0026gt; Add Directory.Build.targets or copy this on root of your repo:  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;Project\u0026gt; \u0026lt;Import Project=\u0026#34;Sdk.targets\u0026#34; Sdk=\u0026#34;MsBullet.Sdk\u0026#34; /\u0026gt; \u0026lt;/Project\u0026gt; "},{"id":1,"href":"/msbullet/configuration/tools/","title":"Built-in tools","section":"Configuration","content":"Opt-out tools. #  Some tools supplied with the MsBullet SDK can be excluded by setting specific variables.\nTo disable the following tools, you will need to set their property to false.\n   Tool Property     xUnit UsingToolXUnit   Nerdbank.GitVersioning UsingToolNerdbankGitVersioning   StyleCop UsingToolStyleCopAnalyzers   SonarSource UsingToolSonarAnalyzer    "},{"id":2,"href":"/msbullet/configuration/","title":"Configuration","section":"MsBullet SDK","content":"Static analyzers #  Coming soon üòê\n"},{"id":3,"href":"/msbullet/configuration/conventions/","title":"Conventions","section":"Configuration","content":"Recommended conventions. #  File Naming. #  Filenames should be all lowercase, for instance: build.cmd or nuget.config. Only exceptions are for files that needs to be cased a particular way for an existing set of tools to read them (Example: Directory.Build.props which MSBuild expects exactly that case on Linux).\nFilenames with multiple words should use kebab-casing like common-variables.ps1.\nMSBuild based targets and props files for a particular library should match the exact casing of the library package they belong to, like Microsoft.Common.targets.\nDependent Packages Version. #  Package versions are stored in MSBuild properties in the eng\\Versions.props file. Use these properties to include the correct version of the package. New properties will be included as needed.\nIf your project depend on a package which is also part of the .NET SDK used by MsBullet (check global.json to see which version is currently in use) the project should use the version of the package available in the SDK. Otherwise, the latest stable version of the package should be used. For instance, the Microsoft.SourceLink.GitHub (version 1.0.0) is present on the .NET SDK and the version is exposed in MsBullet through the $(MicrosoftSourceLinkGitHubVersion) property in eng\\Versions.props. Therefore, to include Newtonsoft.Json in your project do the following:\n\u0026lt;PackageReference Include=\u0026quot;Microsoft.SourceLink.GitHub\u0026quot; Version=\u0026quot;$(MicrosoftSourceLinkGitHubVersion)\u0026quot; /\u0026gt;\n"},{"id":4,"href":"/msbullet/configuration/conventions/","title":"Conventions","section":"Configuration","content":"Coming soon üòê\n"},{"id":5,"href":"/msbullet/configuration/predefined-variables/","title":"Well-known properties","section":"Configuration","content":"Well-known properties. #  MsBullet SDK provides some properties for internal use, and you can use them in your build logic.\nFor all other variables mentioned that are not in the table above, you can find more information in the official documentation.\n   Property Description Default value Overridable Note     Configuration Specify the current project configuration. Debug ‚úîÔ∏èÔ∏è    Platform Specify the current project platform. AnyCPU ‚úîÔ∏è    PlatformName Specify the current project platform name. $(Platform) ‚úîÔ∏è    RepoRoot Identifying the root of repository. N/A ‚úîÔ∏è Navigate up the folder tree until a global.json is found.   ArtifactsDir Specify the root where build system outputs are placed. $(RepoRoot)/artifacts/ ‚ùå    OutDirName Used to specified the end folder of path where artifacts are placed $(MSBuildProjectName) ‚úîÔ∏è    BaseOutputPath Identifying folder where binary artifacts are placed $(ArtifactsBinDir)/$(MSBuildProjectName)/ ‚úîÔ∏è    OutputPath Identifying folder where artifacts are placed When $(PlatformName) is equal to AnyCPU $(BaseOutputPath)/$(Configuration)/, otherwise $(BaseOutputPath)/$(PlatformName)/$(Configuration)/ ‚ùå    BaseIntermediateOutputPath Identifying folder where CIL artifats are placed $(ArtifactsObjDir)/$(MSBuildProjectName)/ ‚úîÔ∏è    IntermediateOutputPath Identifying folder where artifacts are placed When $(PlatformName) is equal to AnyCPU $(BaseIntermediateOutputPath)/$(Configuration)/, otherwise $(BaseIntermediateOutputPath)/$(PlatformName)/$(Configuration)/ ‚ùå    UsingToolXUnit Used to opt-out built-in features.By default we use xUnit as test framework, that\u0026rsquo;re represents the standart de-facto. true ‚úîÔ∏è    UsingToolNerdbankGitVersioning Used to opt-out built-in features.By default we use Nerdbank.GitVersioning as semantic versioning tool. true ‚úîÔ∏è    UsingToolStyleCopAnalyzers Used to opt-out built-in features.By default we use StyleCopAnalyzers to enforce a set of style and consistency code rules. true ‚úîÔ∏è    UsingToolSonarAnalyzer Used to opt-out built-in features.By default we use SonarSource as a well-established code quality standards. true ‚úîÔ∏è    StyleCopConfig Used to customize the default rules of StyleCopAnalyzers through the stylecop.json. $(RepoRoot)/eng/stylecop.json ‚úîÔ∏è    IsUnitTestProject Identifying unit test project. A project is identified as unit test project when your\u0026rsquo;s name end with:.Tests.UnitTests false ‚úîÔ∏è    IsIntegrationTestProject Identifying integration test project. A project is identified as integration test project when your\u0026rsquo;s name end with: .IntegrationTests false ‚úîÔ∏è    IsPerformanceTestProject Identifying performance test project. A project is identified as performance test project when your\u0026rsquo;s name end with: .PerformanceTests false ‚úîÔ∏è    IsTestProject Identifying test project.A project is identified as test project when it has one of that properties as true:IsUnitTestProjectIsIntegrationTestProjectIsPerformanceTestProject N/A ‚ùå    DeployProjectOutput Mark a project to deploy (TODO: specify Deploy target) true ‚úîÔ∏è    PackageOutputPath Identifies where build output package will be stored. When $(IsShippable) is equal to true $(ArtifactsShippingPackagesDir), otherwise $(ArtifactsNonShippingPackagesDir) ‚ùå    IsShippable Mark a project as shippable, a project should be shippable when your output is intended for the public. When $(IsTestProject) is equal to true false, otherwise N/A. ‚úîÔ∏è    PackageLicenseFile Identifies the license of the package License.txt ‚úîÔ∏è That file will be added to package when $(PackageLicenseExpressionInternal) is not valorized and $(IsPackable) is equal to true   PackageLicenseExpressionInternal Specifies the license to be used. TODO ‚úîÔ∏è    IsPackable Identifies the project as packable. When $(IsTestProject) is equal to true false, otherwise N/A. ‚úîÔ∏è    MicrosoftCodeAnalysisNetAnalyzersVersion Specifies the version of Microsoft.CodeAnalysis.NetAnalyzers 6.* ‚úîÔ∏è Used only for .NET version lower then .NET 5   MicrosoftVisualStudioThreadingAnalyzersVersion  16.* ‚úîÔ∏è Used only for .NET version lower then .NET 5, will be removed in the next major release.   DotNetRoot   ‚úîÔ∏è    MonoTool  mono ‚úîÔ∏è    RepositoryEngineeringDir Identifies the engineering directory of the repository. $(RepoRoot)/eng ‚ùå    RepositoryToolsDir  $(RepoRoot)/.tools ‚ùå    VersionsPropsPath Specifies the path of Versions.props $(RepositoryEngineeringDir)Versions.props ‚ùå    ArtifactsToolsetDir  $(ArtifactsDir)/toolset ‚ùå    ArtifactsObjDir  $(ArtifactsDir)/obj ‚ùå    ArtifactsBinDir  $(ArtifactsDir)/bin ‚ùå    ArtifactsLogDir  $(ArtifactsDir)/log/$(Configuration) ‚ùå    ArtifactsTmpDir  $(ArtifactsDir)/tmp/$(Configuration) ‚ùå    ArtifactsTestResultsDir  $(ArtifactsDir)/TestResults/$(Configuration) ‚ùå    ArtifactsReportDir  $(ArtifactsTestResultsDir)/Reports ‚ùå    ArtifactsCoverageDir  $(ArtifactsTestResultsDir)/Coverage ‚ùå    ArtifactsSymStoreDirectory  $(ArtifactsDir)/SymStore/$(Configuration) ‚ùå    ArtifactsPackagesDir  $(ArtifactsDir)/packages/$(Configuration) ‚ùå    ArtifactsShippingPackagesDir  $(ArtifactsPackagesDir)/Shippable ‚ùå    ArtifactsNonShippingPackagesDir  $(ArtifactsPackagesDir)/NonShippable ‚ùå    BuildForLiveUnitTesting  TODO ‚ùå    MicrosoftNETTestSdkVersion Specifies the version of Microsoft.NET.Test.Sdk 16.* ‚úîÔ∏è Available only when $(IsTestProject) is equal to true, will be updated to 17.* in the next major release.   TestRunnerName   ‚ùå    ExcludeFromSourceBuild   ‚ùå    VersionToolName   ‚ùå    NerdbankGitVersioningVersion Specifies the version of Nerdbank.GitVersioning 3.* ‚úîÔ∏è    XUnitVersion Specifies the version of xUnit 2.* ‚úîÔ∏è Available only when $(IsTestProject) is equal to true   XUnitAssertVersion Specifies the version of xUnit $(XUnitVersion) ‚úîÔ∏è Available only when $(IsTestProject) is equal to true   XUnitAbstractionsVersion Specifies the version of xUnit $(XUnitVersion) ‚úîÔ∏è Available only when $(IsTestProject) is equal to true   XUnitRunnerVisualStudioVersion Specifies the version of xUnit 2.4.3 ‚úîÔ∏è Available only when $(IsTestProject) is equal to true   XUnitRunnerConsoleVersion Specifies the version of xUnit 2.4.1 ‚úîÔ∏è Available only when $(IsTestProject) is equal to true   XUnitDesktopSettingsFile Specifies the xUnit runner configuration. $(MSBuildThisFileDirectory)xunit.runner.json ‚ùå Available only when $(IsTestProject) is equal to true   TestRuntime   ‚ùå    TestArchitectures   ‚úîÔ∏è    GitRepoRoot Used by Nerdbank.GitVersioning to identify the .git folder $(RepoRoot) ‚úîÔ∏è     "}]