<?xml version="1.0" encoding="utf-8"?>
<Project>

  <PropertyGroup>
    <CoverageOutputFormat>json,cobertura,opencover</CoverageOutputFormat>
    <CoverageOutputFormat Condition="'$(CoverageOutputFormat)' != ''">$(CoverageOutputFormat)</CoverageOutputFormat>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsUnitTestProject)' == 'true'">
    <_GetCodeToCollectTarget Condition="'$(TargetFrameworks)' == ''">_InnerGetCodeToCollect</_GetCodeToCollectTarget>
    <_GetCodeToCollectTarget Condition="'$(TargetFrameworks)' != ''">_OuterGetCodeToCollect</_GetCodeToCollectTarget>
  </PropertyGroup>

  <PropertyGroup Condition="'$(IsUnitTestProject)' == 'true' and '$(TestArchitectures)' == ''">
    <TestArchitectures Condition="'$(TestArchitectures)' == ''">$(PlatformTarget)</TestArchitectures>
    <TestArchitectures Condition="('$(PlatformTarget)' == '' or '$(PlatformTarget)' == 'AnyCpu') and '$(TestArchitectures)' == ''">x64</TestArchitectures>
  </PropertyGroup>

  <Target Name="CollectCoverage" DependsOnTargets="$(_GetCodeToCollectTarget);RunCollectCoverage" Condition="'$(IsUnitTestProject)' == 'true'" />

  <Target Name="CollectCoverageAfterVSTest" DependsOnTargets="CollectCoverage" Condition="'$(CollectCoverageOnTest)' == 'true'" BeforeTargets="VSTest" />

  <ItemGroup>
    <_TestArchitectureItems Include="$(TestArchitectures)" />
  </ItemGroup>

  <Target Name="_InnerGetCodeToCollect"
        Inputs="*%(_TestArchitectureItems.Identity)"
        Outputs="*%(_TestArchitectureItems.Identity)"
        Returns="@(CollectInstrumentation);@(OutputReport)"
        Condition="'$(SkipTests)' != 'true' and ('$(TestTargetFrameworks)' == '' or $([System.String]::new(';$(TestTargetFrameworks);').Contains(';$(TargetFramework);')))">

    <PropertyGroup>
      <_TestArchitecture>%(_TestArchitectureItems.Identity)</_TestArchitecture>
      <_ResultFileNameNoExt>$(MSBuildProjectName)_$(TargetFramework)_$(_TestArchitecture)</_ResultFileNameNoExt>
    </PropertyGroup>
    
    <ItemGroup>
      <_OutFormats Include="$(CoverageOutputFormat.Split(','))" />
    </ItemGroup>

    <ItemGroup>
      <CollectInstrumentation Include="$(TargetPath)">
        <ExcludeAssemblies>[$(MSBuildProjectName)*]*</ExcludeAssemblies>
      </CollectInstrumentation>
      <OutputReport Include="$(ArtifactsCoverageDir)$(_ResultFileNameNoExt).%(_OutFormats.Identity)">
        <Format>%(_OutFormats.Identity)</Format>
      </OutputReport>
    </ItemGroup>
  </Target>

  <Target Name="_OuterGetCodeToCollect" Returns="@(CollectInstrumentation);@(OutputReport)">
    <ItemGroup>
      <_TargetFramework Include="$(TargetFrameworks)" />
    </ItemGroup>
    <MSBuild Projects="$(MSBuildProjectFile)"
             Condition="'$(TargetFrameworks)' != ''"
             Targets="_InnerGetCodeToCollect"
             Properties="TargetFramework=%(_TargetFramework.Identity)">
      <Output ItemName="CollectInstrumentation" TaskParameter="TargetOutputs" />
      <Output ItemName="OutputReport" TaskParameter="TargetOutputs" />
    </MSBuild>
  </Target>

  <!-- Import specialized targets files of supported coverage report generator -->
  <Import Project="$(MSBuildThisFileDirectory)$(CodeCoverageToolName)\$(CodeCoverageToolName).targets" Condition="'$(CodeCoverageToolName)' != '' and Exists('$(MSBuildThisFileDirectory)$(CodeCoverageToolName)\$(CodeCoverageToolName).targets')"/>
  
</Project>
