[{"id":0,"href":"/msbullet/configuration/predefined-variables/","title":"Well-known properties","section":"Configuration","content":"Well-known properties. #  MsBullet SDK provides a set of predefined properties that store information about the project in the MSBuild context. These properties are evaluated in the same manner as other MSBuild properties. For example, to use the RepoRoot property, you type $(RepoRoot).\nMsBullet SDK uses the values in the following table to predefine reserved and well-known properties. Reserved properties cannot be overridden, and most well-known properties shouldn\u0026rsquo;t be overridden except in advanced scenarios.\nFor all other variables mentioned that are not in the table above, you can find more information in the official documentation.\n   Property Description Default value Overridable Note     Configuration Specify the current project configuration. Debug ✔️️    Platform Specify the current project platform. AnyCPU ✔️    PlatformName Specify the current project platform name. $(Platform) ✔️    RepoRoot Identifying the root of repository. N/A ✔️ Navigate up the folder tree until a global.json is found.   ArtifactsDir Specify the root where build system outputs are placed. $(RepoRoot)/artifacts/ ❌    OutDirName Used to specified the end folder of path where artifacts are placed $(MSBuildProjectName) ✔️    BaseOutputPath Identifying folder where binary artifacts are placed $(ArtifactsBinDir)/$(MSBuildProjectName)/ ✔️    OutputPath Identifying folder where artifacts are placed When $(PlatformName) is equal to AnyCPU $(BaseOutputPath)/$(Configuration)/, otherwise $(BaseOutputPath)/$(PlatformName)/$(Configuration)/ ❌    BaseIntermediateOutputPath Identifying folder where CIL artifats are placed $(ArtifactsObjDir)/$(MSBuildProjectName)/ ✔️    IntermediateOutputPath Identifying folder where artifacts are placed When $(PlatformName) is equal to AnyCPU $(BaseIntermediateOutputPath)/$(Configuration)/, otherwise $(BaseIntermediateOutputPath)/$(PlatformName)/$(Configuration)/ ❌    UsingToolXUnit Used to opt-out built-in features.By default we use xUnit as test framework, that\u0026rsquo;re represents the standart de-facto. true ✔️    UsingToolNerdbankGitVersioning Used to opt-out built-in features.By default we use Nerdbank.GitVersioning as semantic versioning tool. true ✔️    UsingToolCoverletMsBuild Used to opt-out built-in features.By default we use Coverlet to collect code coverage metrics. true ✔️    UsingToolReportGenerator Used to opt-out built-in features.By default we use ReportGenerator to generate code coverage reports. true ✔️    UsingToolStyleCopAnalyzers Used to opt-out built-in features.By default we use StyleCopAnalyzers to enforce a set of style and consistency code rules. true ✔️    UsingToolSonarAnalyzer Used to opt-out built-in features.By default we use SonarSource as a well-established code quality standards. true ✔️    StyleCopConfig Used to customize the default rules of StyleCopAnalyzers through the stylecop.json. $(RepoRoot)/eng/stylecop.json ✔️    ShowStyleCopConfig Used to display the configuration file set through StyleCopConfig into the project directory on Visual Studio false ✔️    IsUnitTestProject Identifying unit test project. A project is identified as unit test project when your\u0026rsquo;s name end with:.Tests.UnitTests false ✔️    IsIntegrationTestProject Identifying integration test project. A project is identified as integration test project when your\u0026rsquo;s name end with: .IntegrationTests false ✔️    IsPerformanceTestProject Identifying performance test project. A project is identified as performance test project when your\u0026rsquo;s name end with: .PerformanceTests false ✔️    IsTestProject Identifying test project.A project is identified as test project when it has one of that properties as true:IsUnitTestProjectIsIntegrationTestProjectIsPerformanceTestProject N/A ❌    DeployProjectOutput Mark a project to deploy (TODO: specify Deploy target) true ✔️    PackageOutputPath Identifies where build output package will be stored. When $(IsShippable) is equal to true $(ArtifactsShippingPackagesDir), otherwise $(ArtifactsNonShippingPackagesDir) ❌    IsShippable Mark a project as shippable, a project should be shippable when your output is intended for the public. When $(IsTestProject) is equal to true false, otherwise N/A. ✔️    PackageLicenseFile Identifies the license of the package License.txt ✔️ That file will be added to package when $(PackageLicenseExpressionInternal) is not valorized and $(IsPackable) is equal to true   PackageLicenseExpressionInternal Specifies the license to be used. TODO ✔️    IsPackable Identifies the project as packable. When $(IsTestProject) is equal to true false, otherwise N/A. ✔️    MicrosoftCodeAnalysisNetAnalyzersVersion Specifies the version of Microsoft.CodeAnalysis.NetAnalyzers 6.* ✔️ Used only for .NET version lower then .NET 5   MicrosoftVisualStudioThreadingAnalyzersVersion  16.* ✔️ Used only for .NET version lower then .NET 5, will be removed in the next major release.   DotNetRoot   ✔️    MonoTool  mono ✔️    RepositoryEngineeringDir Identifies the engineering directory of the repository. $(RepoRoot)/eng ❌    RepositoryToolsDir  $(RepoRoot)/.tools ❌    VersionsPropsPath Specifies the path of Versions.props $(RepositoryEngineeringDir)Versions.props ❌    ArtifactsToolsetDir  $(ArtifactsDir)/toolset ❌    ArtifactsObjDir  $(ArtifactsDir)/obj ❌    ArtifactsBinDir  $(ArtifactsDir)/bin ❌    ArtifactsLogDir  $(ArtifactsDir)/log/$(Configuration) ❌    ArtifactsTmpDir  $(ArtifactsDir)/tmp/$(Configuration) ❌    ArtifactsTestResultsDir  $(ArtifactsDir)/TestResults/$(Configuration) ❌    ArtifactsReportDir  $(ArtifactsTestResultsDir)/Reports ❌    ArtifactsCoverageDir  $(ArtifactsTestResultsDir)/Coverage ❌    ArtifactsSymStoreDirectory  $(ArtifactsDir)/SymStore/$(Configuration) ❌    ArtifactsPackagesDir  $(ArtifactsDir)/packages/$(Configuration) ❌    ArtifactsShippingPackagesDir  $(ArtifactsPackagesDir)/Shippable ❌    ArtifactsNonShippingPackagesDir  $(ArtifactsPackagesDir)/NonShippable ❌    BuildForLiveUnitTesting  TODO ❌    MicrosoftNETTestSdkVersion Specifies the version of Microsoft.NET.Test.Sdk 16.* ✔️ Available only when $(IsTestProject) is equal to true, will be updated to 17.* in the next major release.   TestRunnerName   ❌    ExcludeFromSourceBuild   ❌    VersionToolName   ❌    NerdbankGitVersioningVersion Specifies the version of Nerdbank.GitVersioning 3.* ✔️    CoverletMSBuildVersion Specifies the version of Coverlet 3.* ✔️    ReportGeneratorVersion Specifies the version of ReportGenerator 5.* ✔️    XUnitVersion Specifies the version of xUnit 2.* ✔️ Available only when $(IsTestProject) is equal to true   XUnitAssertVersion Specifies the version of xUnit $(XUnitVersion) ✔️ Available only when $(IsTestProject) is equal to true   XUnitAbstractionsVersion Specifies the version of xUnit $(XUnitVersion) ✔️ Available only when $(IsTestProject) is equal to true   XUnitRunnerVisualStudioVersion Specifies the version of xUnit 2.4.3 ✔️ Available only when $(IsTestProject) is equal to true   XUnitRunnerConsoleVersion Specifies the version of xUnit 2.4.1 ✔️ Available only when $(IsTestProject) is equal to true   XUnitDesktopSettingsFile Specifies the xUnit runner configuration. $(MSBuildThisFileDirectory)xunit.runner.json ❌ Available only when $(IsTestProject) is equal to true   TestRuntime   ❌    TestArchitectures   ✔️    GitRepoRoot Used by Nerdbank.GitVersioning to identify the .git folder $(RepoRoot) ✔️    GenerateCoverageReportSummary Specifies if produce code coverage reports summary true ✔️ Available only when $(IsTestProject) is equal to true    "},{"id":1,"href":"/msbullet/configuration/conventions/","title":"Conventions","section":"Configuration","content":"Conventions. #  Project Naming. #  When a project name ends with .Tests, .UnitTests, .IntegrationTests or .PerformanceTests are detected as test projects automatically and the IsTestProject property will be evaluated as true.\nIn addition, for the following suffixes the propriety identifying their specific type will be valued:\n for .Tests or .UnitTests, IsUnitTestProject will be true for .IntegrationTests, IsIntegrationTestProject will be true for .PerformanceTests, IsPerformanceTestProject will be true  Recommended conventions. #  File Naming. #  Filenames should be all lowercase, for instance: build.cmd or nuget.config. Only exceptions are for files that need to be cased a particular way for an existing set of tools to read them (Example: Directory.Build.props which MSBuild expects exactly that case on Linux).\nFilenames with multiple words should use kebab-casing like common-variables.ps1.\nMSBuild based targets and props files for a particular library should match the exact casing of the library package they belong to, like Microsoft.Common.targets.\nDependent Packages Version. #  Package versions are stored in MSBuild properties in the eng\\Versions.props file, like this. Use these properties to include the correct version of the package. New properties will be included as needed.\nThe property version should be named with this pattern {PackageName}Version where PackageName shouldn\u0026rsquo;t have any punctuation characters, for example for Microsoft.NET.Test.Sdk the property version will be MicrosoftNETTestSdkVersion.\nIf your project depends on a package that is also part of the .NET SDK used by MsBullet (check global.json to see which version is currently in use) the project should use the version of the package available in the SDK. Otherwise, the latest stable version of the package should be used. For instance, the Microsoft.SourceLink.GitHub (version 1.0.0) is present on the .NET SDK and the version is exposed in MsBullet through the $(MicrosoftSourceLinkGitHubVersion) property in eng\\Versions.props. Therefore, to include Newtonsoft.Json in your project do the following:\n\u0026lt;PackageReference Include=\u0026quot;Newtonsoft.Json\u0026quot; Version=\u0026quot;$(NewtonsoftJsonVersion)\u0026quot; /\u0026gt;\n"},{"id":2,"href":"/msbullet/getting-started/","title":"Getting started","section":"MsBullet SDK","content":"Getting started #  You can start using this SDK based on MSBuild in three steps:\n Add global.json:  { \u0026#34;msbuild-sdks\u0026#34;: { \u0026#34;MsBullet.Sdk\u0026#34;: \u0026#34;\u0026lt;MsBullet.Sdk version\u0026gt;\u0026#34; } } Replace MsBullet.Sdk version with desired NuGet package version, https://www.nuget.org/packages/MsBullet.Sdk\nAdd Directory.Build.props or copy this on root of your repo:  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;Project\u0026gt; \u0026lt;Import Project=\u0026#34;Sdk.props\u0026#34; Sdk=\u0026#34;MsBullet.Sdk\u0026#34; /\u0026gt; \u0026lt;/Project\u0026gt; Add Directory.Build.targets or copy this on root of your repo:  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;Project\u0026gt; \u0026lt;Import Project=\u0026#34;Sdk.targets\u0026#34; Sdk=\u0026#34;MsBullet.Sdk\u0026#34; /\u0026gt; \u0026lt;/Project\u0026gt; "},{"id":3,"href":"/msbullet/configuration/tools/","title":"Built-in tools","section":"Configuration","content":"Built-in tools. #  The toolset provided by MsBullet SDK combines third-party tools and specific SDK features, all of these can be controlled by UsingTool{tool-name} properties, where tool-name identifies the tool.\nNOTE\nAll default dependency versions are referenced to the latest major using wildcard, for further info https://docs.microsoft.com/nuget/concepts/package-versioning.\nThis means that if you want to use a specific of a certain dependency you must override the default variable to lock restoring to the wanted version.\n Opt-out configuration. #  Some tools supplied with the MsBullet SDK can be excluded by setting specific variables.\nTo disable the following tools, you will need to set their property to false.\n   Tool Property     xUnit UsingToolXUnit   Nerdbank.GitVersioning UsingToolNerdbankGitVersioning   Coverlet UsingToolCoverlet   ReportGenerator UsingToolReportGenerator   StyleCop UsingToolStyleCopAnalyzers   SonarSource UsingToolSonarAnalyzer    "},{"id":4,"href":"/msbullet/single-build-output/","title":"Single build output","section":"MsBullet SDK","content":"Single build output #  All projects output will be placed into the artifacts folder that has structured below\nartifacts ├─ obj │ └─ $(MSBuildProjectName) │ └─ ($(Platform)|) │ └─ $(Configuration) ├─ bin │ └─ $(MSBuildProjectName) │ └─ ($(Platform)|) │ └─ $(Configuration) ├─ log │ └─ $(Configuration) ├─ tmp │ └─ $(Configuration) ├─ TestResults │ └─ $(Configuration) | ├─ Coverage │ │ └─ $(MSBuildProjectName)_$(TargetFramework|)_$(Platform|).(xml|html) │ └─ Reports │ ├─ $(MSBuildProjectName) │ | ├─ History │ | └─ Reports | └─ Summary └─ packages └─ $(Configuration) ├─ Shippable └─ NonShippable    Directory Description     bin Build output of each project.   obj Intermediate directory for each project.   packages NuGet packages produced by all projects in the repo.   log Build binary log and other logs.   tmp Temp files generated during build.   TestResults Reports and coverage results produced by all projects in the repo.    Each directory is identified by the property, please refer to Well-known properties.\n"},{"id":5,"href":"/msbullet/configuration/extension-points/","title":"Build extension points","section":"Configuration","content":"Build extension points #  All file references below are relative to the repo root. The root is identified by the presence of global.json file.\n/eng/Versions.props: a single file listing packages versions and used tools #  The file should be used as a single point of package versions for all NuGet packages used in the repository and for an opt-out for tools or features, like suck.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt; \u0026lt;Project\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;MicrosoftBuildFrameworkVersion\u0026gt;16.5.0\u0026lt;/MicrosoftBuildFrameworkVersion\u0026gt; \u0026lt;MicrosoftBuildVersion\u0026gt;$(MicrosoftBuildFrameworkVersion)\u0026lt;/MicrosoftBuildVersion\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;PropertyGroup\u0026gt; \u0026lt;UsingToolXUnit\u0026gt;false\u0026lt;/UsingToolXUnit\u0026gt; \u0026lt;/PropertyGroup\u0026gt; \u0026lt;/Project\u0026gt; The toolset also defines default versions for various tools and dependencies. These defaults can be overridden in the Versions.props file.\nFor more information about tools or for a list of UsingTool{Tool} properties and default versions, please refer to Built-in tools.\n/eng/stylecop.json #  The default path where place the configuration of StyleCop.Analyzers overridable by property StyleCopConfig.\nIf you want to show the configuration file on project folder you can set ShowStyleCopConfig to true.\n"},{"id":6,"href":"/msbullet/configuration/","title":"Configuration","section":"MsBullet SDK","content":"Configuration #    Well-known properties  MsBullet SDK provides a set of predefined properties that store information about the project in the MSBuild context. These properties are evaluated in the same manner as other MSBuild properties. MsBullet SDK uses the values in the following table to predefine reserved and well-known properties. Reserved properties cannot be overridden, and most well-known properties shouldn\u0026#39;t be overridden except in advanced scenarios.   Conventions  There are some useful conventions for keeping behavior consistent across multiple operating systems.   Built-in tools  The toolset provided by MsBullet SDK combines third-party tools and specific SDK features.   Build extension points  It is possible to centrally manage the versioning of dependencies or to perform pre- or post-compilation steps.   "},{"id":7,"href":"/msbullet/configuration/tools/coverletmsbuild/","title":"Coverlet","section":"Built-in tools","content":"Coverlet. #  This framework is provided as a built-in tool of MsBullet SDK to collect coverage through coverlet.msbuild.\nHow to use and customization. #  By default, all projects that have the IsTestProject property set to true collect coverage metrics.\nNOTE\nTo customize this tool, you can refer to the official repository     Property Description Default value Overridable Note     CoverletOutput Specifies the file path where the coverage report will be saved. $(ArtifactsCoverageDir)\\$(MSBuildProjectName).xml ❌️    CoverletOutputFormat Specifies the format(s) in which to generate the report. cobertura ✔️️    CoverletMSBuildVersion Set the tool version, by default it use the latest available major. 3.* ✔️️     "},{"id":8,"href":"/msbullet/configuration/tools/reportgenerator/","title":"ReportGenerator","section":"Built-in tools","content":"ReportGenerator. #  ReportGenerator is provided as a built-in tool of MsBullet SDK to generate code coverage reports.\nHow to use and customization. #  By default, all projects that have the IsTestProject property set to true produce a human-readable report over collected coverage metrics by coverlet.\nIn addition, we produce a summary report that contains all cross-project collected metrics after each project test.\nNOTE\nTo customize this tool, you can refer to the official site.     Property Description Default value Overridable Note     GenerateCoverageReportSummary Specifies whether to generate the summary report. true ✔️    ReportGeneratorVersion Set the tool version, by default it use the latest available major. 5.* ✔️️     "},{"id":9,"href":"/msbullet/configuration/tools/sonaranalyzer/","title":"SonarSource Analyzer","section":"Built-in tools","content":"SonarSource Analyzer. #  This analyzer is provided as a built-in tool of MsBullet SDK to help developers maintain high security and code quality.\nHow to use and customization. #  By default, there is no application of specific configurations within the SDK.\nNOTE\nFor customization of the rules of this tool, you can refer to the official repository     Property Description Default value Overridable Note     SonarAnalyzerCSharpVersion Set the tool version, by default it use the latest available major. 8.* ✔️️     "},{"id":10,"href":"/msbullet/configuration/tools/stylecopanalyzers/","title":"StyleCop Analyzers","section":"Built-in tools","content":"StyleCop Analyzers. #  This analyzer is provided as a built-in tool of MsBullet SDK to enforce standard code conventions\nHow to use and customization. #  By default, there is no application of specific configurations within the SDK.\nNOTE\nFor customization of the rules of this tool, you can refer to the official documentation     Property Description Default value Overridable Note     StyleCopConfig Specifies the file path of stylecop.json configuration file. $(RepoRoot)eng/stylecop.json ✔️️    ShowStyleCopConfig Specifies whether the stylecop.json file should be displayed within the project root. false ✔️️    StyleCopAnalyzersVersion Set the tool version, by default it use the latest available major. 1.* ✔️️     "}]